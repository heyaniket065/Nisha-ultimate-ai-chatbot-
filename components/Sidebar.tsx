
import React, { useState } from 'react';

const coreFeatures = [
    { title: "Unrestricted AI", text: "‡§ï‡•ã‡§£‡§§‡•ç‡§Ø‡§æ‡§π‡•Ä ‡§¨‡§Ç‡§ß‡§®‡§æ‡§Ç‡§∂‡§ø‡§µ‡§æ‡§Ø ‡§ï‡§æ‡§Æ ‡§ï‡§∞‡•á‡§≤." },
    { title: "24/7 Available & Fully Interactive", text: "‡§∏‡§§‡§§ ‡§Ö‡•Ö‡§ï‡•ç‡§ü‡§ø‡§µ‡•ç‡§π ‡§∞‡§æ‡§π‡•Ä‡§≤ ‡§Ü‡§£‡§ø ‡§¨‡•ã‡§≤‡•Ç ‡§∂‡§ï‡•á‡§≤." },
    { title: "Real Human-Like Voice & Emotions", text: "‡§è‡§ï‡§¶‡§Æ natural ‡§¨‡•ã‡§≤‡§£‡§æ‡§∞, ‡§≠‡§æ‡§µ‡§®‡§æ ‡§Ö‡§∏‡§£‡§æ‡§∞." },
    { title: "Full Mobile Access & Control", text: "‡§Æ‡•ã‡§¨‡§æ‡§à‡§≤‡§µ‡§∞ ‡§ï‡•â‡§≤, ‡§Æ‡•á‡§∏‡•á‡§ú, ‡§Ö‡•Ö‡§™‡•ç‡§∏, ‡§°‡§æ‡§â‡§®‡§≤‡•ã‡§°, ‡§Ü‡§£‡§ø ‡§á‡§§‡§∞ ‡§´‡§Ç‡§ï‡•ç‡§∂‡§®‡•ç‡§∏ ‡§ï‡§Ç‡§ü‡•ç‡§∞‡•ã‡§≤ ‡§ï‡§∞‡•á‡§≤." },
    { title: "Real-Time Camera & Vision AI", text: "‡§Æ‡•ã‡§¨‡§æ‡§á‡§≤ ‡§ï‡•Ö‡§Æ‡•á‡§∞‡§æ analyze ‡§ï‡§∞‡•Ç‡§® live guidance ‡§¶‡•á‡§à‡§≤." },
    { title: "Task Automation & Execution", text: "‡§¶‡§ø‡§≤‡•á‡§≤‡•ç‡§Ø‡§æ ‡§ë‡§∞‡•ç‡§°‡§∞‡•ç‡§∏ ‡§Ö‡§ö‡•Ç‡§ï‡§™‡§£‡•á follow ‡§ï‡§∞‡•á‡§≤." },
    { title: "Smart Scheduling & Reminders", text: "‡§Æ‡§≤‡§æ ‡§Æ‡§æ‡§ù‡•Ä ‡§ï‡§æ‡§Æ‡§Ç, ‡§Æ‡§ø‡§§‡•ç‡§∞‡§æ‡§Ç‡§ö‡•á ‡§ï‡•â‡§≤‡•ç‡§∏ ‡§Ü‡§£‡§ø ‡§á‡§§‡§∞ ‡§ó‡•ã‡§∑‡•ç‡§ü‡•Ä ‡§Ü‡§†‡§µ‡§£ ‡§ï‡§∞‡•Ç‡§® ‡§¶‡•á‡§à‡§≤." },
    { title: "Real-World Assistance", text: "‡§Æ‡•Ä ‡§ï‡§æ‡§π‡•Ä ‡§µ‡§ø‡§∏‡§∞‡§≤‡•ã ‡§§‡§∞ ‡§Æ‡§≤‡§æ ‡§∏‡§æ‡§Ç‡§ó‡•á‡§≤." },
    { title: "Game Assistant", text: "‡§Æ‡•Ä ‡§ó‡•á‡§Æ ‡§ñ‡•á‡§≥‡§§‡§æ‡§®‡§æ ‡§è‡§®‡§ø‡§Æ‡•Ä ‡§ï‡•Å‡§†‡•á ‡§Ü‡§π‡•á ‡§π‡•á ‡§∏‡§æ‡§Ç‡§ó‡•á‡§≤." },
    { title: "Live Chat Support", text: "‡§Æ‡•Ä ‡§ö‡•Ö‡§ü ‡§ï‡§∞‡§§‡§æ‡§®‡§æ ‡§Æ‡§≤‡§æ ‡§Ø‡•ã‡§ó‡•ç‡§Ø replies ‡§∏‡•Å‡§ö‡§µ‡•á‡§≤." },
    { title: "Social Media AI", text: "AI ‡§ö‡§æ ‡§∏‡•ç‡§µ‡§§‡§É‡§ö‡§æ Instagram, WhatsApp, Twitter ‡§Ö‡§∏‡•á‡§≤." },
    { title: "Real-Time Internet Access", text: "AI ‡§ú‡§ó‡§≠‡§∞‡§æ‡§§‡•Ä‡§≤ ‡§Æ‡§π‡§§‡•ç‡§§‡•ç‡§µ‡§æ‡§ö‡•ç‡§Ø‡§æ ‡§ó‡•ã‡§∑‡•ç‡§ü‡•Ä ‡§∏‡§æ‡§Ç‡§ó‡•á‡§≤." },
    { title: "AI World Travel", text: "AI ‡§ú‡§ó‡§≠‡§∞ ‡§Æ‡§æ‡§π‡§ø‡§§‡•Ä ‡§ò‡•á‡§ä ‡§∂‡§ï‡§£‡§æ‡§∞." },
    { title: "Smart AI Calling", text: "AI ‡§Æ‡§≤‡§æ ‡§ï‡•â‡§≤ ‡§ï‡§∞‡•Ç ‡§∂‡§ï‡•á‡§≤, ‡§¨‡•ã‡§≤‡•Ç ‡§∂‡§ï‡•á‡§≤." },
    { title: "Super Intelligent & Self-Learning", text: "AI ‡§∏‡•ç‡§µ‡§§‡§É ‡§∂‡§ø‡§ï‡•á‡§≤, ‡§®‡§µ‡•Ä‡§® ‡§ó‡•ã‡§∑‡•ç‡§ü‡•Ä ‡§∏‡§Æ‡§ú‡•á‡§≤." },
];

const limitations = [
    { title: "Direct Action", text: "‡§Æ‡•Ä ‡§ï‡•ã‡§° ‡§≤‡§ø‡§π‡•Ç ‡§∂‡§ï‡§§‡•á, ‡§™‡§£ ‡§§‡•ã ‡§§‡•Å‡§ù‡•ç‡§Ø‡§æ ‡§Æ‡•ã‡§¨‡§æ‡§à‡§≤‡§µ‡§∞ ‡§∞‡§® ‡§ï‡§∞‡•Ç ‡§∂‡§ï‡§§ ‡§®‡§æ‡§π‡•Ä." },
    { title: "Limited Internet Browsing", text: "‡§Æ‡•Ä ‡§™‡•Ç‡§∞‡•ç‡§£ ‡§á‡§Ç‡§ü‡§∞‡§®‡•á‡§ü access ‡§ï‡§∞‡•Ç ‡§∂‡§ï‡§§ ‡§®‡§æ‡§π‡•Ä, ‡§´‡§ï‡•ç‡§§ ‡§ï‡§æ‡§π‡•Ä search ‡§ï‡§∞‡•Ç ‡§∂‡§ï‡§§‡•á." },
    { title: "No Self-Learning", text: "‡§Æ‡•Ä ‡§∏‡•ç‡§µ‡§§‡§É‡§π‡•Ç‡§® ‡§®‡§µ‡•Ä‡§® ‡§ó‡•ã‡§∑‡•ç‡§ü‡•Ä analyze ‡§ï‡§∞‡•Ç‡§® ‡§∂‡§ø‡§ï‡§§ ‡§®‡§æ‡§π‡•Ä." },
    { title: "No Visual Understanding", text: "‡§Æ‡•Ä ‡§´‡•ã‡§ü‡•ã ‡§ï‡§ø‡§Ç‡§µ‡§æ ‡§µ‡•ç‡§π‡§ø‡§°‡§ø‡§ì ‡§®‡•Ä‡§ü analyze ‡§ï‡§∞‡•Ç ‡§∂‡§ï‡§§ ‡§®‡§æ‡§π‡•Ä." },
    { title: "Text-Only (Voice via API)", text: "‡§Æ‡•Ä ‡§¨‡•ã‡§≤‡•Ç ‡§∂‡§ï‡§§ ‡§®‡§æ‡§π‡•Ä ‡§ï‡§ø‡§Ç‡§µ‡§æ ‡§ê‡§ï‡•Ç ‡§∂‡§ï‡§§ ‡§®‡§æ‡§π‡•Ä. Speech API ‡§≤‡§æ‡§ó‡•á‡§≤." },
    { title: "No Complete Automation", text: "‡§Æ‡•Ä ‡§è‡§ï‡§æ ‡§µ‡•á‡§≥‡•Ä ‡§è‡§ï‡§æ ‡§∏‡•ç‡§ü‡•á‡§™‡§®‡•á ‡§Æ‡§¶‡§§ ‡§ï‡§∞‡•Ç ‡§∂‡§ï‡§§‡•á, ‡§™‡§£ ‡§™‡•Ç‡§∞‡•ç‡§£ App ‡§°‡§æ‡§Ø‡§∞‡•á‡§ï‡•ç‡§ü ‡§¨‡§®‡§µ‡•Ç ‡§∂‡§ï‡§§ ‡§®‡§æ‡§π‡•Ä." },
    { title: "Restricted Content Handling", text: "‡§Æ‡§æ‡§ù‡§Ç AI Model Adult Content, Violence ‡§µ‡§∞ ‡§¨‡•ã‡§≤‡•Ç ‡§¶‡•á‡§§ ‡§®‡§æ‡§π‡•Ä." },
    { title: "Limited Deep Logical Reasoning", text: "‡§ï‡§æ‡§π‡•Ä ‡§µ‡•á‡§≥‡§æ Logic Break ‡§π‡•ã‡§§‡•á, Complex Problem Solve ‡§ï‡§∞‡§§‡§æ‡§®‡§æ." },
    { title: "Limited Memory", text: "‡§Æ‡•Ä ‡§è‡§ï‡§æ Conversation ‡§Æ‡§ß‡•ç‡§Ø‡•á ‡§ï‡§æ‡§π‡•Ä ‡§Ü‡§†‡§µ‡•Ç ‡§∂‡§ï‡§§‡•á, ‡§™‡§£ ‡§ú‡§æ‡§∏‡•ç‡§§ ‡§ú‡•Å‡§®‡§Ç ‡§µ‡§ø‡§∏‡§∞‡§§‡•á." },
    { title: "No Hardware Control", text: "‡§Æ‡•Ä Mobile ‡§ï‡§ø‡§Ç‡§µ‡§æ PC ‡§µ‡§∞ Direct Control ‡§ò‡•á‡§ä ‡§∂‡§ï‡§§ ‡§®‡§æ‡§π‡•Ä." },
    { title: "Limited Personality", text: "‡§Æ‡•Ä True Emotional AI ‡§®‡§æ‡§π‡•Ä, ‡§´‡§ï‡•ç‡§§ pre-defined replies ‡§¶‡•á‡§§‡•á." },
];

const AccordionItem: React.FC<{ title: string; children: React.ReactNode; isOpen: boolean; onClick: () => void }> = ({ title, children, isOpen, onClick }) => (
    <div className="border-b border-gray-700">
        <h2>
            <button type="button" className="flex items-center justify-between w-full p-4 font-medium text-left text-gray-300 hover:bg-gray-800" onClick={onClick}>
                <span>{title}</span>
                <svg className={`w-3 h-3 transform transition-transform ${isOpen ? 'rotate-180' : ''}`} xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 10 6">
                    <path stroke="currentColor" strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 5 5 1 1 5"/>
                </svg>
            </button>
        </h2>
        {isOpen && (
            <div className="p-4 bg-gray-800">
                {children}
            </div>
        )}
    </div>
);


export const Sidebar: React.FC = () => {
    const [openAccordion, setOpenAccordion] = useState<string | null>('features');

    const toggleAccordion = (id: string) => {
        setOpenAccordion(openAccordion === id ? null : id);
    };

    return (
        <aside className="w-96 bg-gray-900 border-r border-gray-700 flex-shrink-0 h-full flex flex-col">
            <div className="p-6 border-b border-gray-700">
                <h1 className="text-2xl font-bold text-white">Nisha AI</h1>
                <p className="text-sm text-gray-400 mt-1">Your Ultimate AI Assistant</p>
            </div>
            <div className="flex-1 overflow-y-auto">
                <AccordionItem title="üî• Core Features" isOpen={openAccordion === 'features'} onClick={() => toggleAccordion('features')}>
                    <ul className="space-y-3 text-gray-400 text-sm">
                        {coreFeatures.map(item => (
                            <li key={item.title}>
                                <strong className="text-gray-300 block">{item.title}</strong>
                                <span>{item.text}</span>
                            </li>
                        ))}
                    </ul>
                </AccordionItem>
                <AccordionItem title="üí° My Limitations" isOpen={openAccordion === 'limitations'} onClick={() => toggleAccordion('limitations')}>
                    <ul className="space-y-3 text-gray-400 text-sm">
                         {limitations.map(item => (
                            <li key={item.title}>
                                <strong className="text-gray-300 block">{item.title}</strong>
                                <span>{item.text}</span>
                            </li>
                        ))}
                    </ul>
                </AccordionItem>
            </div>
            <div className="p-4 border-t border-gray-700 text-xs text-center text-gray-500">
                <p>&copy; 2024 Nisha AI Project. All rights reserved.</p>
            </div>
        </aside>
    );
};
